@using Flea.Models
@using Reservation = Flea.Models.Reservation

<div class="reservation">
    <div class="reservation__name">@Reservation.ReservationOwner.Name</div>
    <div class="reservation__tables">@Reservation.TableCount Stande</div>
     @{
        var paid = Reservation.PaymentStatus switch {
            PaymentStatus.NotPaid => ("orange", "Ej betalt"),
            PaymentStatus.Paid => ("green", "Betalt"),
            _ => ("blue", "Aftale")
        };
    }
    <div class="reservation__payment-status bg-primary @(paid.Item1)">
        @paid.Item2
    </div>
    <div class="reservation__actions">
        <button class="button c-red" @onclick="Delete">Slet</button>
        <Modal ButtonCss="button c-g2" ButtonName="Rediger" @ref="_child">
            <ReservationForm Reservation="_temp" OnValidSubmit="OnSubmit" Modal="_child"></ReservationForm>
        </Modal>
    </div>
</div>

@code {
    private Modal _child = null!;
    private Reservation _temp = new(1, 1, PaymentStatus.NotPaid, "", new Customer("", ""), null!);
    private Reservation _reservation = null!;

    [Parameter]
    public Reservation Reservation
    {
        get => _reservation;
        set
        {
            _reservation = value;
            _temp = Reservation.Clone();
        }
    }

    [Parameter]
    public EventCallback<Reservation> OnDelete { get; set; }
    
    [Parameter]
    public EventCallback<EditContext> OnEdit { get; set; }

    public async Task Delete()
    {
        await OnDelete.InvokeAsync(Reservation);
    }

    public async Task OnSubmit(EditContext context)
    {
        _child.Close();
        
        _reservation.TableCount = _temp.TableCount;
        _reservation.PaymentStatus = _temp.PaymentStatus;
        _reservation.Comments = _temp.Comments;
        
        await OnEdit.InvokeAsync(context);
    }
}