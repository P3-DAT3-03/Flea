@using Flea.Models
@using Flea.Utility
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<BingoContext> _dbFactory

@using NEvaldas.Blazor.Select2

<EditForm Model="Reservation" OnValidSubmit="OnSubmit">
    <div class="edit-form">
        @if (Reservation.Id == 0)
        {
            <div class="edit-form-div">
                <div>Søg efter loppe:</div>
                <div class="search-box" style="display: grid;">
                    
                    <input class="search-input edit-search-input-form" type="search" placeholder="Eks. Hans Henriksen"
                           list="customer" @bind="CustomerInput"/>
                    
                    <datalist id="customer">
                        @if (_shownCustomers != null)
                        {
                            <option selected="selected" disabled="" value="-1">Vælg en loppe</option>
                            foreach (var customer in _shownCustomers)
                            {
                                <option value="@customer.Id">@customer.Name</option>
                            }
                        }
                    </datalist>
                    
                    @* <InputSelect class="search-input edit-search-input" @bind-Value="CustomerInput"> *@
                    @*     @if (_shownCustomers != null) *@
                    @*     { *@
                    @*          *@
                    @*         <option selected="selected" disabled="" value="-1">Vælg en loppe</option> *@
                    @*         foreach (var customer in _shownCustomers) *@
                    @*         { *@
                    @*             <option value="@customer.Id">@customer.Name</option> *@
                    @*         } *@
                    @*     } *@
                    @* </InputSelect> *@

                    @* <input class="search-input edit-search-input-form" type="search" value="" placeholder="Eks. Hans Henriksen" *@
                    @*        @oninput="Search"/> *@
                    @* *@
                    @* <select class="search-input edit-search-input" id="customer" type="search" *@
                    @*         @bind="CustomerInput"> *@
                    @*     @if (_shownCustomers != null) *@
                    @*     { *@
                    @*         <option selected="selected" disabled="" value="-1">Vælg en loppe</option> *@
                    @*         foreach (var customer in _shownCustomers) *@
                    @*         { *@
                    @*             <option value="@customer.Id">@customer.Name</option> *@
                    @*         } *@
                    @*     } *@
                    @* </select> *@
                </div>
            </div>
        }
        else
        {
            <div class="edit-form-div">
                <div>Loppe:</div>
                <InputText class="search-input edit-search-input" disabled=""
                           @bind-Value="Reservation.ReservationOwner.Name"/>
            </div>
        }
        <div class="edit-form-div">
            <div>Antal stande: </div>
            <InputNumber class="search-input edit-search-input" placeholder="Eks. 3"
                         @bind-Value="Reservation.TableCount"></InputNumber>
        </div>
        <div class="edit-form-div">
            <div>Betalt?: </div>
            <label class="checkbox">
                <InputCheckbox type="checkbox" class="checkbox__input"
                               @bind-Value="Reservation.Paid"></InputCheckbox>
                <div class="checkbox__checkmark"></div>
                <div id="move-div">@(Reservation.Paid ? "Betalt" : "Ej betalt")</div>
            </label>
        </div>
        <div class="edit-form-div">
            <div>Bemærkninger: </div>
            <textarea   class="search-input edit-search-input text-area"
                        placeholder="Eks. Handicap, tæt på rygerrum mm."
                        @bind="Reservation.Comments"></textarea>
        </div>
        @* <div> *@
        @*     <label>Bod type: </label> *@
        @*     <InputText @bind-Value="Temp.Comments"></InputText> *@
        @* </div> *@
        @* <div> *@
        @*     <label>Leje af tøj stativ: </label> *@
        @*     <InputNumber @bind-Value="Temp.Comments"></InputNumber> *@
        @* </div> *@
        @* <div> *@
        @*     <label>Bemærkninger: </label> *@
        @*     <InputText @bind-Value="Temp.Comments"></InputText> *@
        @* </div> *@
        <div id="move-down">
            <button type="submit" class="button create-button button--outline">@(Reservation.Id == 0 ? "Opret booking" : "Gem ændringer")</button>
            <button type="button" class="button button del-button button--outline" @onclick="@Modal.ModalCancel">Cancel</button>
        </div>
    </div>
</EditForm>

@code 
{
    [Parameter]
    public Reservation Reservation { get; set; } = null!;

    [Parameter]
    public EventCallback<EditContext> OnValidSubmit { get; set; }

    [Parameter]
    public Modal Modal { get; set; } = null!;

    private List<Customer>? _customers;
    private IEnumerable<Customer>? _shownCustomers;
    private string _lastSearchTerm = string.Empty;
    public int CustomerInput;
    
    protected override async Task OnInitializedAsync()
    {
        if (Reservation == null!)
        {
            throw new ArgumentNullException(nameof(Reservation),"Parameter Reservation can never be null");
        }

        await base.OnInitializedAsync();
        await UpdateReservationList();

    }
    
    public void Search(ChangeEventArgs e) => Search(e.Value?.ToString()!.ToLower() ?? "");
    public void Search(string searchTerm)
    {
    // If no input show everything
        if (searchTerm == "")
        {
            _shownCustomers = _customers;
        }
        else 
        {// Finds by name
            _shownCustomers = from c
                in _customers
                where c.Name.ToLower().Contains(searchTerm)
                select c;
        }
        _lastSearchTerm = searchTerm;
    }
    
    private async Task UpdateReservationList()
    {
        await using var context = _dbFactory.CreateDbContext();
        _customers = await _dbFactory.GetAll<BingoContext, Customer>();
        Search(_lastSearchTerm);
    }

    private async Task OnSubmit(EditContext context)
    {
        if (Reservation.ReservationOwnerId == 0)
        {
            Reservation.ReservationOwnerId = CustomerInput;
        }
        await OnValidSubmit.InvokeAsync(context);

    }
}