@using Flea.Models
<div class="cluster border">
    <div class="cluster">
        @for (var i = 0; i < Inner.Tables.Count; i++)
        {
            var tableClass = Inner.Type switch
            {
                ClusterType.Round => i switch
                {
                    0 or 3 or 4 or 7 => "horizontal",
                    5 or 6 => "vertical bottom",
                    _ => "vertical"
                    },
                ClusterType.Horizontal => "horizontal",
                _ => "vertical"
            };
            tableClass += SetColor!(Inner, Inner.Tables[i]);
            var value = SetValue!(Inner, Inner.Tables[i]);
            var pathId = i;
            <div class="table @tableClass" value="@value" @onclick="()=>OnTableClicked(Inner.Tables[pathId], value)">
                @i
            </div>
        }
        @if (Inner.Type == ClusterType.Round)
        {
            <div class="cluster-tag">@Inner.Name</div>
        }
    </div>
</div>
@code {
    [Parameter]
    public Models.Cluster Inner { get; set; } = null!;
    
    [Parameter]
     public SelectColor? SetColor { get; set; }
    
    [Parameter]
    public SelectValue? SetValue { get; set; }

    [Parameter]
    public EventCallback<(Table,Models.Cluster,int)> OnTableSelect { get; set; }

    private int _pathId = -1;
    
    public delegate int SelectValue(Models.Cluster cluster, Table table);

    public delegate string SelectColor(Models.Cluster cluster, Table table);
    
    private async Task OnTableClicked(Table table, int pathId)
    {
        await OnTableSelect.InvokeAsync((table, Inner, pathId));
    }
    
    protected override void OnInitialized()
    {
        SetColor ??= (_, _) => " white";
        SetValue ??= (_, _) => -1;
    }
}