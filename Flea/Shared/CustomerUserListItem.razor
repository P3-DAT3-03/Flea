@using Flea.Models
@using Flea.Utility
@using Customer = Flea.Models.Customer

<div class="customer">
    <div class="customer__id">@Customer.Id.ToString().PadLeft(4, '0')</div>
    <div class="customer__name">@Customer.Name @(Customer.Nickname.Length > 0 ? $"({Customer.Nickname})" : "")</div>
    <div class="customer__phone">+45 @Customer.PhoneNumber</div>
    <div class="flex-end" style="gap: 12px">
        <button class="button c-red" @onclick="Delete">Slet</button>
        <Modal ButtonCSS="button c-g2" ButtonName="Rediger" @ref="_modal">
            <CustomerForm Customer="_temp" OnValidSubmit="OnSubmit" Modal="_modal"></CustomerForm>
        </Modal>
    </div>
</div>

@code {
    private Modal _modal = null!;
    private Customer _temp = new(0);
    private Customer _customer = null!;

    [Parameter]
    public Customer Customer
    {
        get => _customer;
        set
        {
            _customer = value;
            this.CheckParameter(Customer, nameof(Customer));
            _temp = Customer.Clone();
        }
    }

    [Parameter, RequiredParameter]
    public EventCallback<Customer> OnDelete { get; set; }

    [Parameter, RequiredParameter]
    public EventCallback<EditContext> OnEdit { get; set; }

    private async Task Delete()
    {
        await OnDelete.InvokeAsync(Customer);
    }

    private async Task OnSubmit(EditContext context)
    {
        _modal.Close();

        Customer.Name = _temp.Name;
        _customer.PhoneNumber = _temp.PhoneNumber;

        await OnEdit.InvokeAsync(context);
    }

    protected override Task OnInitializedAsync()
    {
        ParameterChecker.CheckParameters(this);
        return base.OnInitializedAsync();
    }

}