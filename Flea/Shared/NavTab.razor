@inject NavigationManager _navigationManager

<li class="list-item list-item--tappable navigation-tab">
    <div class="@(IsChecked ? "active-tab" : "inactive-tab")">
        <div class="tabbar tabbar--top tabbar--material">
            <label class="tabbar__item tabbar--material__item">
                <button class="tabbar__button tabbar--material__button" @onclick="Navigate">
                    <i class="tabbar__icon tabbar--material__icon">
                        <img src="./icons/@Icon" alt="brand"/>
                    </i>
                    <div class="tabbar__label tabbar--material__label">@ChildContent</div>
                </button>
            </label>
        </div>
    </div>
</li>

@code {
    [Parameter]
    public string Icon { get; set; }

    [Parameter]
    public string IconClass { get; set; } = "material-icons-outlined";

    [Parameter]
    public string Href { get; set; }
    
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private void Navigate()
    {
        _navigationManager.NavigateTo(Href);
        StateHasChanged();
        
    }

    private bool IsChecked
    {
        get {
            var getPath = "/" + _navigationManager.ToBaseRelativePath(_navigationManager.Uri);
            if (getPath == "/")
            {
                getPath = "/Home";
            }

            return Href == getPath;}
    }
}