@inject NavigationManager _navigationManager
@using Flea.Pages
@using System.Security.Policy

<!-- NavBar -->
<div>
    <ul class="list">
        <NavTab Href="/Home" Icon="start-icon.svg">Start</NavTab>
        <NavTab Href="/Customers" Icon="customers-icon.svg">Lopper</NavTab>
    </ul>

    @if (SecondaryMenuIsVisible)
    {
        <ul class="list">
            <NavTab Href="@ReservationsLink()" Icon="reservations-icon.svg">Book</NavTab>
            <NavTab Href="@PlacementLink()" Icon="placement-icon.svg">Placér</NavTab>
            <NavTab Href="@MarketLink()" Icon="market-icon.svg">Marked</NavTab>
        </ul>
    }
</div>

@code {
    
    [Parameter]
    public static int EventId { get; set; }

    private string ReservationsLink() { return "/Event/" + EventId + "/Reservations"; }
    private string PlacementLink() { return "/Event/" + EventId + "/Placement"; }
    private string MarketLink() { return "/Event/" + EventId + "/Market"; }

    private bool SecondaryMenuIsVisible
    {
        get
        {
            var getPath = "/" + _navigationManager.ToBaseRelativePath(_navigationManager.Uri);

            switch (getPath)
            {
                case "/":
                case "/Home":
                case "/Customers":
                    return false;
                default:
                    return true;
            }
        }
    }

    private void OnLocationChanged(Object? o, LocationChangedEventArgs args)
    {
        StateHasChanged();
    }

    protected override Task OnInitializedAsync()
    {
        _navigationManager.LocationChanged += OnLocationChanged;
        return base.OnInitializedAsync();
    }

    void ReservationsString()
    {
        // Reservations
            // /Event/{EventId:int}/Reservations
        
        // Placement
            // /Event/{EventId:int}/Placement
        
        // Market
            // /Event/{EventId:int}/Market
    }

}