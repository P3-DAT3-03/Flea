@page "/CustomerOverview"
@using Customer = Flea.Models.Customer
<div>
    <div class="view-head">
        <input class="search-input" type="search" value="" placeholder="SÃ¸g efter kunde" @oninput="Searchbar">
        <Modal ButtonName="lav ny kunde" @ref="child">
            <EditForm Model="Temp" OnValidSubmit="NewCustomer">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="txt">Name: </div>
                    <InputText class="text-input" @bind-Value="Temp.Name" placeholder="Skriv et navn her"/>
                <div class="txt">Telefonnummer: </div>
                    <InputText class="text-input" @bind-Value="Temp.PhoneNumber" placeholder="Skriv et mobilnummer her" />
                <button type="submit" class="button button--outline create-button">Opret Loppe</button>
            </EditForm>
        </Modal>
    </div>

    @foreach (var customer in ShownCustomers)
    {
        <div>
            <UserListItem Customer="@customer" OnDelete="@DeleteCustomerInformation">
            </UserListItem>
        </div>
    }
</div>

@code
{
    Modal child;
    private Customer Temp = new("", "");
    private string _search = "";

    // Dummy data ---

    private List<Customer> Customers = new()
    {
        new Customer("Sebastian Aaholm", "24823423") {Id = 1},
        new Customer("Jens Jensen", "4541341") {Id = 2},
        new Customer("Hans Nielsen", "8888888") {Id = 3}
    };

    // ---

    private IEnumerable<Customer> ShownCustomers;

    // Delete the customer
    public void DeleteCustomerInformation(int id)
    {
        Customers = Customers.Where(c => c.Id != id).ToList();
        ShownCustomers = ShownCustomers.Where(c => c.Id != id);
        StateHasChanged();
    }

    // Edits the customer
    public void EditCustomerInformation(int id)
    {
        Console.WriteLine("Write the function here hehe");
    }

    // Makes a new Customer
    public void NewCustomer(EditContext editContext)
    {
        var customer = (Customer) editContext.Model;
        Customers.Add(customer);
        child.ModalCancel();
    }

    // Searchbar function
    public void Searchbar(ChangeEventArgs e)
    {
    // If no input whole list is shown
        var input = e.Value?.ToString() ?? "";
        if (input == "")
        {
            ShownCustomers = Customers;
        }
        else if (Char.IsDigit(input[0]))
        {
    // Finds by phonenumbers

            var results = from c
                in Customers
                where c.PhoneNumber.Contains(input)
                select c;
            ShownCustomers = results;
        }
        else
        {
    // Finds by name
            var results = from c
                in Customers
                where c.Name.ToLower().Contains(input.ToLower())
                select c;
            ShownCustomers = results;
        }
    }

    protected override void OnInitialized()
    {
        ShownCustomers = Customers;
    }
}