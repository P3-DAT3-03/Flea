@page "/Customers"

@inject IDbContextFactory<BingoContext> _dbFactory

@using Customer = Flea.Models.Customer
@using Microsoft.EntityFrameworkCore
@using Flea.Models
@using Flea.Utility

<HeaderTitle Value="Lopper"/>

<div>
    <div class="view-head">
        <input class="search-input" type="search" value="" placeholder="SÃ¸g efter loppe..." @oninput="Search">
        <Modal ButtonCSS="button blue float-right" ButtonName="Opret ny loppe" @ref="_child">
            <CustomerForm Customer="_temp" OnValidSubmit="CreateCustomer" Modal="_child"></CustomerForm>
        </Modal>
    </div>
    @if (_shownCustomers is not null && _shownCustomers.Any())
    {
        @foreach (var customer in _shownCustomers)
        {
            <CustomerUserListItem Customer="@customer" OnEdit="@UpdateCustomer" OnDelete="@DeleteCustomer"/>
        }
        <div style="display: inline-block"></div>
    }
    else
    {
        <h2>Der er ingen lopper at vise...</h2>
    }
</div>


@code
{

    private Modal _child = null!;
    private Customer _temp = new(0);
    private string _lastSearchTerm = string.Empty;

    private List<Customer>? _customers;
    private IEnumerable<Customer>? _shownCustomers;

    // Delete the customer
    public async Task DeleteCustomer(Customer customer)
    {
        await _dbFactory.Delete(customer);
        await UpdateCustomersList();
        
    }

    // Makes a new Customer
    public async Task CreateCustomer(EditContext editContext)
    {
        await _dbFactory.SaveNew(_temp);
        _temp = new Customer(0); // reset _temp
        _child.ModalCancel();
        await UpdateCustomersList();
    }

    public async Task UpdateCustomer(EditContext context)
    {
        await _dbFactory.Save((Customer) context.Model);
        await UpdateCustomersList();
    }

    // Searchbar function
    public void Search(ChangeEventArgs e) => Search(e.Value?.ToString() ?? "");

    public void Search(string searchTerm)
    {
        // If no input show everything
        if (searchTerm == "")
        {
            _shownCustomers = _customers;
        }
        else if (char.IsDigit(searchTerm[0]))
        {
            // Finds by phone numbers
            var results = from c
                in _customers
                where c.PhoneNumber.Contains(searchTerm)
                select c;
            _shownCustomers = results;
        }
        else
        {
            // Finds by name
            var results = from c
                in _customers
                where c.Name.ToLower().Contains(searchTerm.ToLower())
                select c;
            _shownCustomers = results;
        }
        
        _lastSearchTerm = searchTerm;
    }

    private async Task UpdateCustomersList()
    {
        _customers = await _dbFactory.GetAll<BingoContext,Customer>();
        Search(_lastSearchTerm);
    }
    
    protected override async Task OnInitializedAsync()
    {
        await UpdateCustomersList();
        await base.OnInitializedAsync();
    }
}