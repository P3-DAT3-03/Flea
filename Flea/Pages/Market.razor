@page "/Event/{EventId:int}/Market"
@using Flea.Models
@using System.Globalization
@using Flea.Utility
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<BingoContext> _dbFactory

@{
    var title = TitleDate;
    if (title is not null)
    {
        <HeaderTitle Value="@($"Oversigt over Loppemarkede den {TitleDate}")"/>
    }
}

<div class="padded-content">
    <div class="view-head">
        <input class="search-input" type="search" value="" placeholder="SÃ¸g efter booking" @oninput="Search">
        <button class="button c-blue float-right">Gulv Plans Oversigt</button>
    </div>
    @if (_shownReservation is not null && _shownReservation.Any())
    {
        <div class="scrollable">
            @foreach (var reservation in _shownReservation)
            {
                <MarketUserListItem EventId="EventId" Reservation="reservation"></MarketUserListItem>
            }
        </div>
    }
    else
    {
        <h2>Der er ingen bookinger at vise...</h2>
    }
</div>

@code {
    private string? TitleDate => Event?.DateTime.ToString("d. MMMM, yyyy", CultureInfo.CreateSpecificCulture("da-DK"));

    [Parameter]
    public int EventId { get; set; }

    public Event? Event;
    private string _lastSearchTerm = string.Empty;

    private List<Reservation>? _reservations;
    private IEnumerable<Reservation>? _shownReservation;

    // Searchbar function
    public void Search(ChangeEventArgs e) => Search(e.Value?.ToString()!.ToLower() ?? "");

    public void Search(string searchTerm)
    {
    // If no input show everything
        if (searchTerm == "")
        {
            _shownReservation = _reservations;
        }
        else if (char.IsDigit(searchTerm[0]))
        {
    // Finds by Booths
            _shownReservation = from c
                in _reservations
                where c.TableCount.ToString().Contains(searchTerm)
                select c;
        }
        else if (searchTerm.Contains("ej betalt"))
        {   // Finds by ej betalt
            _shownReservation = from r
                in _reservations
                where r.PaymentStatus == PaymentStatus.NotPaid
                select r;
        }else if (searchTerm.Contains("betalt"))
        {   // Finds by betalt
            _shownReservation = from r
                in _reservations
                where r.PaymentStatus == PaymentStatus.Paid
                select r;
        }else if (searchTerm.Contains("aftale"))
        {   // Finds by aftale
            _shownReservation = from r
                in _reservations
                where r.PaymentStatus == PaymentStatus.Other
                select r;
        }
        else
        {
    // Finds by name
            _shownReservation = from c
                in _reservations
                where c.ReservationOwner.Name.ToLower().Contains(searchTerm)
                select c;
        }
        _lastSearchTerm = searchTerm;
    }

    private async Task UpdateReservationList()
    {
        _reservations = await _dbFactory.Get<BingoContext, Reservation>()
            .Where(reservation => reservation.Event.Id == EventId)
            .Include(reservation => reservation.ReservationOwner)
            .All();
        Search(_lastSearchTerm);
    }

    protected override async Task OnInitializedAsync()
    {
        var e = await _dbFactory.Get<BingoContext, Event>()
            .First(e => e.Id == EventId);

        Event = e ?? throw new Exception("TODO create good error for user");

        await UpdateReservationList();
        await base.OnInitializedAsync();
    }

}