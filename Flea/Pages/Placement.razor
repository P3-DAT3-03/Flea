@page "/Event/{EventId:int}/Placement"
@inject IDbContextFactory<BingoContext> _dbFactory

@using Flea.Models
@using Flea.Utility
@using Microsoft.EntityFrameworkCore
@using Table = Flea.Models.Table
@using Cluster = Flea.Models.Cluster
@using System.Globalization

@if(TitleDate is not null){
    <HeaderTitle Value="@($"Placering til den <span class='date'>{TitleDate}</span>")"/>
}
<div class="container event-placement">
    @if (Clusters != null)
    {
        <div class="cluster-body">
            <ClusterContainer 
                SetColor="@SetColor"
                SetValue="@SetValue"
                OnTableSelect="@TableSelected"
                SetTableContent="@((_,_)=>"")"
                Clusters="@Clusters"/>
            <div class="guides center">
                <div class="guide">
                    <div class="ball white"></div>
                    <p>Tilgængelig</p>
                </div>
                <div class="guide">
                    <div class="ball red"></div>
                    <p>Reserveret</p>
                </div>
                @if (SelectedReservation != null)
                {
                    <div class="guide">
                        <div class="ball blue"></div>
                        <p>Valgt Bord</p>
                    </div>
                    <div class="guide">
                        <div class="ball orange"></div>
                        <p>Tom Plads</p>
                    </div>
                }
            </div>
        </div>
        <div class="side-panel">
            @if (SelectedReservation != null)
            {
                var customer = SelectedReservation?.ReservationOwner;
                <div class="name">@customer?.Name</div>
                var paid = SelectedReservation?.PaymentStatus switch {
                    PaymentStatus.NotPaid => ("orange", "Ej betalt"),
                    PaymentStatus.Paid => ("green", "Har betalt"),
                    _ => ("blue", "Aftale")
                    };
                <br/>
                <div class="container">
                    <div class="phone">+45 @customer?.PhoneNumber</div>
                    <div class="status @(paid.Item1) bold">@(paid.Item2)</div>
                </div>
                <br/>
                <div class="booths">
                    @{
                        var tableCount = SelectedReservation?.TableCount - SelectedReservation?.EmptyTableCount;
                        var eTableCount = SelectedReservation?.EmptyTableCount;
                    }
                    Skal have stande: <span style="color: var(--ios-blue)">@(tableCount > 0 ? $"{tableCount}" : "")</span> @(tableCount > 0 && eTableCount > 0 ? "+ " : "")
                    @if (eTableCount > 0)
                    {
                        <span style="color: var(--ios-orange)">@eTableCount</span>
                    }
                </div>
                <h3>Bemærkninger</h3>
                <div class="comments">@SelectedReservation?.Comments</div>
                <div class="buttons">
                     <br/>
                     @if (SelectedReservation?.Tables.Count > 0){
                         <button class="button--large--cta large-button red" @onclick="RemoveTablesFromReservation">Slet Placering</button>
                         <br/>
                         <button class="button--large--cta large-button grey2" @onclick="DeselectReservation">Tilbage</button>
                     }
                     else
                     {
                         <button class="button--large--cta large-button red" @onclick="DeselectReservation">Annuler Placering</button>
                         <br/>
                         if (SelectedReservation?.EmptyTableCount > 0)
                         {
                             <button class="button--large--cta large-button orange" @onclick="()=> EditTypeMode = !EditTypeMode">Placer Tomme Pladser</button>
                             <br/>
                         }
                         <button class="button--large--cta large-button blue" @onclick="ConfirmSelection">Gem Placering</button>
                     }
                </div>
            } else {
                <br/>
                IEnumerable<Reservation> reservations;
                if(EditMode)
                    reservations = Event?.Reservations.Where(r => r.Tables.Count > 0) ?? new List<Reservation>();
                else
                    reservations = Event?.Reservations.Where(r => r.Tables.Count == 0) ?? new List<Reservation>();
                foreach (var reservation in reservations)
                {
                    <ReservationListItem Reservation="@reservation" ReservationSelected="@ShowReservation"></ReservationListItem>
                }
                <div class="buttons">
                    <br/>
                    @if (EditMode)
                    {
                        <button class="button--large--cta grey2 large-button" @onclick="() => EditMode = false">Placer Reservationer</button>
                    }
                    else
                    {
                        <button class="button--large--cta grey2 large-button" @onclick="() => EditMode = true">Rediger Placeringer</button>
                    }
                        
                    <br/>
                    <button class="button--large--cta blue large-button" >Udfyld Resten</button>
                </div>
            }
        </div>
    }
    else
    {
        <p>Loading Event</p>
    }
</div>

@code {
    [Parameter]
    public int EventId { get; set; }
    
    private string? TitleDate => Event?.DateTime.ToString("d. MMMM, yyyy", CultureInfo.CreateSpecificCulture("da-DK"));
    
    public Event? Event;
    public List<Cluster>? Clusters { get; set; }
    public Reservation? SelectedReservation { get; set; }
    public Table? StartNode { get; set; }
    public List<int[]> Paths { get; set; } = null!;
    public int SelectedPath { get; set; }
    public Cluster? SelectedCluster { get; set; }
    public bool EditMode { get; set; }
    public bool EditTypeMode { get; set; }

    private string SetColor(Cluster cluster, Table table)
    {
        if (table.Reservation != null) return " red";

        // In case we have selected a path
        if (SelectedPath != -1 && SelectedPath < Paths.Count)
        {
            if (EditTypeMode && Paths[SelectedPath].Contains(table.Id) && table.Type == TableType.Empty)
                return " orange";
            return Paths[SelectedPath].Contains(table.Id) ? " blue" : " white";
        }
        // In case we have not chosen a path yet
        if (Paths.Count <= 0) return " white";
        if (StartNode?.Id == table.Id) return " blue";
        if (Paths.Any(path => path.Contains(table.Id))) return " path";
        return " white";
    }

    private int SetValue(Cluster cluster, Table table)
    {
        for (var i = 0; i < Paths.Count; i++)
        {
            if (Paths[i].Contains(table.Id)) return i;
        }
        return -1;
    }

    private void ShowReservation(Reservation res)
    {
        SelectedReservation = res;
    }
    
    private void DeselectReservation()
    {
        var tables = SelectedCluster?.Tables.FindAll(t => 
            t.Type == TableType.Empty && Paths[SelectedPath].Contains(t.Id));
        tables?.ForEach(t => t.Type = TableType.Table);
        SelectedPath = -1;
        SelectedReservation = null;
        SelectedCluster = null;
        Paths.Clear();
        StartNode = null;
    }
    
    private void TableSelected((Table, Cluster, int) id)
    {
        var (table, cluster, pathId) = id;
        
        if (EditTypeMode && SelectedPath != -1)
        {
            if (!Paths[SelectedPath].Contains(table.Id)) return;
            var emptyTableCount = cluster.Tables.Aggregate(0, 
                (acc, t) => 
                    Paths[SelectedPath].Contains(t.Id) && t.Type == TableType.Empty ? acc + 1 : acc);
            Console.WriteLine(emptyTableCount);
            if(emptyTableCount >= SelectedReservation?.EmptyTableCount && table.Type == TableType.Table) return;
            table.Type = table.Type == TableType.Table ? 
                TableType.Empty : 
                TableType.Table;
            return;
        }
        if (SelectedPath != -1)
        {
            SelectedPath = -1;
            pathId = -1;
            SelectedCluster = cluster;
        }

        SelectedReservation ??= table.Reservation;
        
        if (table.Reservation != null)
        {
            StartNode = null;
            Paths.Clear();
            return;
        }
        
        
        if (SelectedReservation == null)
        {
            Console.WriteLine("[Error Popup] No reservation has been selected");
            return;
        }
        
        if (Clusters != null && !Clusters.Contains(cluster))
        {
            Console.WriteLine("[Error Popup] The selected cluster does not exist!");
            return;
        }
        SelectedCluster = cluster;

        if (!SelectedCluster.Tables.Contains(table))
        {
            Console.WriteLine("The selected table does not exists");
            return;
        }
        if (table == StartNode)
        {
            Paths.Clear();
            StartNode = null;
            return;
        }
        
        if (pathId != -1)
        {
            SelectedPath = pathId;
            return;
        }
        Paths.Clear();

        StartNode = null;
        if (SelectedReservation.TableCount == 1)
        {
            Paths.Add(new[] {table.Id});
            return;
        }
        SetPaths(table, cluster);
    }

    private void SetPaths(Table table, Cluster cluster)
    {
        var offset = cluster.Tables.IndexOf(table);
        var endNode1 = SelectedPaths(cluster, offset, 1);
        if (endNode1 != null)
        {
            Paths.Add(endNode1);
            StartNode = table;
        }
        if (cluster.Type != ClusterType.Round)
        {
            if (endNode1 == null)
                Console.WriteLine("[Error Popup] Unable to create a path using the selected start node");
            return;
        }
        var endNode2 = SelectedPaths(cluster, offset, -1);
        if (endNode2 == null)
        {
            if (endNode1 == null)
                Console.WriteLine("[Error Popup] Unable to create any paths using the selected start node");
            return;
        }
        Paths.Add(endNode2);
        StartNode = table;
    }

    private async Task ConfirmSelection()
    {
        if (SelectedCluster == null || SelectedReservation == null) return;
        var tables = Event?.AssignReservation(SelectedCluster, Paths[SelectedPath], SelectedReservation);
        if (tables != null)
            foreach (var table in tables)
                await _dbFactory.Save(table);
    }

    private async void RemoveTablesFromReservation()
    {
        if (SelectedReservation == null) return;
        Console.WriteLine("Delete Reservation");
        await using var context = _dbFactory.CreateDbContext();
        foreach (var table in SelectedReservation.Tables)
        {
            table.Reservation = null;
            context.Tables?.Update(table);
        }
        SelectedReservation.Tables.Clear();
        context.Reservations?.Update(SelectedReservation);
        await context.SaveChangesAsync();
        SelectedReservation = null;
        StateHasChanged();
    }
    
    private int[]? SelectedPaths(Cluster cluster,  int offset, int direction)
    {
        if (SelectedReservation == null) return null;
        var ids = new int[SelectedReservation.TableCount];
        for (var i = 0; i < SelectedReservation.TableCount; i++)
        {
            if (offset >= cluster.Tables.Count) return null;
            if (cluster.Tables[offset].Reservation != null) return null;
            
            ids[i] = cluster.Tables[offset].Id;
            if (cluster.Type == ClusterType.Round)
                (offset, direction) = Wrap(offset, direction);
            offset += direction;
        }
        return ids;
    }

    private static (int, int) Wrap(int offset, int direction)
    {
        return offset switch
        {
            7 when direction is 1 => (4, -1),
            4 when direction is -1 => (-1, 1),
            0 when direction is -1 => (3, 1),
            3 when direction is 1 => (8, -1),
            _ => (offset, direction)
        };
    }

    private async Task<Event?> GetEvent()
    {
        await using var context = _dbFactory.CreateDbContext();
        if (context.Events != null)
            return await context.Events
                .Include("Clusters.Tables.Reservation.ReservationOwner")
                .Include("Clusters.Tables.Reservation.Tables")
                .Include("Reservations.ReservationOwner")
                .Include("Reservations.Tables")
                .AsSplitQuery()
                .OrderBy(e => e.Id)
                .FirstOrDefaultAsync(e => e.Id == EventId);
        return null;
    }
    
    protected override async Task OnInitializedAsync()
    {
        NavMenu.EventId = EventId;
        Event = await GetEvent();
        if (Event != null)
        {
            Event.Clusters.Sort((a, b) => a.Name[0] - b.Name[0]);
            Event.Clusters.Reverse();
            foreach (var cluster in Event.Clusters)
            {
                cluster.Tables.Sort((a,b) => a.Id - b.Id);
            }
            Clusters = Event.Clusters;
        }
        await base.OnInitializedAsync();
    }

    protected override void OnInitialized()
    {
        // Db Integration get the selected Event 
        // Get the clusters and find a sane way to place them all :c
        Paths = new List<int[]>();
        StartNode = null;
        SelectedPath = -1;
        EditMode = false;
        EditTypeMode = false;
    }
}
