@page "/Placing"
@using Flea.Models
@using Table = Flea.Models.Table
<h1>Placing</h1>
<div class="clusters">
@foreach (var cluster in Clusters!)
{
    <Cluster Inner="@cluster" OnTableSelect="@TableSelected"></Cluster>
}
</div>
<style>
    .table {
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px solid black;
    }
    .table.vertical {
        width: 50px;
        height: 25px;
    }
    .table.horizontal {
        width: 25px;
        height: 50px;
    }
    .table.bottom {
        margin-top: 25px;
    }
    .table.on {
        background-color: gray;
    }
    .table.off {
        background-color: white;
        color: black;
    }
    .cluster {
        position: relative;
        display: grid;
        width: max-content;
        grid-template-columns: repeat(4, max-content);
        row-gap: 13px; /* 12.5 */
    }
    .cluster-tag {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
    .clusters {
        display: grid;
        grid-template-columns: repeat(4, max-content);
        row-gap: 25px;
        column-gap: 25px;
    }
</style>
@code {
    private List<Models.Cluster>? Clusters { get; set; }
    private readonly Random _random = new ();  
    private Reservation? SelectedReservation { get; set; }

    private void TableSelected((int t,int c) id)
    {
        var (t, c) = id;
        if (SelectedReservation == null)
        {
            Console.WriteLine("No reservation has been selected");
            return;
        }
        if (c > Clusters?.Count - 1)
        {
            Console.WriteLine("The selected cluster does not exist!");
            return;
        }
        var cluster = Clusters?[c];
        if(cluster == null)return;
        if (t > cluster.Tables.Count - 1)
        {
            Console.WriteLine("The selected table does not exists");
            return;
        }
        
        // Maybe we should also check if selected reservation is null?
        if(cluster.Tables[t].Reservation != null) Console.WriteLine("Show Reservation Panel");
        var tables = new Models.Table[SelectedReservation.TableCount];
        var offset = t;
        var direction = 1;
        for (var i = 0; i < SelectedReservation.TableCount; i++)
        {

            // Use assign reservation to table here!
            // We need a way to check if the cluster is in a line or circle formation
            // Since we do net want the line type to wrap around.
            
            if (cluster.Tables[offset].Reservation == null)
            {
                tables[i] = cluster.Tables[offset];
                (offset, direction) = Wrap(offset, direction);
                offset += direction;
                continue;
            }
            Console.WriteLine("Could not reserve a continuous line of tables.");
            return;
        }
        foreach (var table in tables)
        {
            table.Reservation = SelectedReservation;
        }
        SelectedReservation = null;
    }

    private (int, int) Wrap(int offset, int direction)
    {
        switch (offset)
        {
            case 7 when direction is 1:
                direction = -1;
                offset = 4;
                break;
            case 4 when direction is -1:
                direction = 1;
                offset = -1;
                break;
            case 0 when direction is -1:
                direction = 1;
                offset = 3;
                break;
            case 3 when direction is 1:
                direction = -1;
                offset = 8;
                break;
        }
        return (offset, direction);
    }
    
    protected override void OnInitialized()
    {
        SelectedReservation = new Reservation(1, 3, true, "");
        Clusters = new List<Models.Cluster>();
        AddCluster("L",0);
        AddCluster("I",1);
        AddCluster("F",2);
        AddCluster("C",3);
        AddCluster("K",4);
        AddCluster("H",5);
        AddCluster("E",6);
        AddCluster("B",7);
        AddCluster("J",8);
        AddCluster("G",9);
        AddCluster("D",10);
        AddCluster("A",11);
    }

    private void AddCluster(string name, int id)
    {
        var target = new Models.Cluster(name, 0){Id = id, Tables = new List<Table>()};
        Clusters?.Add(target);
        for (var i = 0; i < 8; i++)
        {
            target.Tables.Add(_random.Next(0, 5) == 1 ?
                new Table {Id = i, Cluster = target,Reservation = new Reservation(0, 1, true, "")} :
                new Table {Id = i, Cluster = target});
        }
    }

}
