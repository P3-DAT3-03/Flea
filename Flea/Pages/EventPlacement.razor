@page "/Placing"
@using Flea.Models
@using Table = Flea.Models.Table
@using Cluster = Flea.Models.Cluster
<h1>Placing</h1>
<div class="clusters">
    @for (var i = 0; i < _clusters.Count; i++)
    {
        <Cluster 
            Inner="@_clusters[i]"
            StartNode="@_startNode"
            Paths="@_paths"
            SelectedCluster="@_selectedCluster"
            ClusterIndex="@i"
            OnTableSelect="@TableSelected"
        />
    }
</div>
<style>
    .table {
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px solid black;
    }
    .table.vertical {
        width: 50px;
        height: 25px;
    }
    .table.horizontal {
        width: 25px;
        height: 50px;
    }
    .table.bottom {
        margin-top: 25px;
    }
    .table.on {
        background-color: gray;
    }
    .table.off {
        background-color: white;
        color: black;
    }
    .table.path {
        background-color: yellow;
    }
    .table.start {
        background-color: #00ff00;
    }
    .cluster {
        position: relative;
        display: grid;
        width: max-content;
        grid-template-columns: repeat(4, max-content);
        row-gap: 13px; /* 12.5 */
    }
    .cluster-tag {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
    .clusters {
        display: grid;
        grid-template-columns: repeat(4, max-content);
        row-gap: 25px;
        column-gap: 25px;
    }
</style>
@code {
    private List<Cluster> _clusters { get; set; }
    private readonly Random _random = new ();  
    private Reservation? _selectedReservation { get; set; }
    private Table? _startNode { get; set; }
    private List<int[]> _paths { get; set; }
    private Cluster _selectedCluster { get; set; }
    
    private void TableSelected((Table, Cluster,int) id)
    {
        var (table, cluster, pathId) = id;
        if (_selectedReservation == null)
        {
            Console.WriteLine("No reservation has been selected");
            return;
        }
        if (!_clusters.Contains(cluster))
        {
            Console.WriteLine("The selected cluster does not exist!");
            return;
        }
        _selectedCluster = cluster;
        
        if (!_selectedCluster.Tables.Contains(table))
        {
            Console.WriteLine("The selected table does not exists");
            return;
        }
        
        if (pathId != -1)
        {
            ConfirmSelection(pathId);
            return;
        }

        if(table.Reservation != null) Console.WriteLine("Show Reservation Panel");

        _paths.Clear();
        if (table == _startNode)
        {
            _startNode = null;
            return;
        }
        _startNode = null;
        var offset = _selectedCluster.Tables.IndexOf(table);
        var endNode1 = SelectedPaths(_selectedCluster, offset, 1);
        if (endNode1 != null)
        {
            _paths.Add(endNode1);
            _startNode = table;
        }
        if (_selectedCluster.Type != Cluster.ClusterType.Round)
        {
            if (endNode1 == null)
                Console.WriteLine("[Error Popup] Unable to create a path using the selected start node");
            return;
        }
        var endNode2 = SelectedPaths(_selectedCluster, offset, -1);
        if (endNode2 == null)
        {
            if (endNode1 == null)
                Console.WriteLine("[Error Popup] Unable to create any paths using the selected start node");
            return;
        }
        _paths.Add(endNode2);
        _startNode = table;
    }

    private void ConfirmSelection(int pathId)
    {
        for (var i = 0; i < _selectedReservation?.TableCount; i++)
        {
            var table = _selectedCluster.Tables.Find(t => t.Id == _paths[pathId][i]);
            if (table != null) table.Reservation = _selectedReservation;
        }
        _selectedReservation = null;
        _startNode = null;
        _paths.Clear();
    }
    
    private int[]? SelectedPaths(Cluster cluster,  int offset, int direction)
    {
        if (_selectedReservation == null) return null;
        var ids = new int[_selectedReservation.TableCount];
        for (var i = 0; i < _selectedReservation.TableCount; i++)
        {
            if (cluster.Tables[offset].Reservation != null) return null;
            
            ids[i] = cluster.Tables[offset].Id;
            if (cluster.Type == Cluster.ClusterType.Round)
                (offset, direction) = Wrap(offset, direction);
            offset += direction;
            
            if (offset >= cluster.Tables.Count && i != cluster.Tables.Count-1)
            {
                return null;
            }
        }
        return ids;
    }

    private static (int, int) Wrap(int offset, int direction)
    {
        return offset switch
        {
            7 when direction is 1 => (4, -1),
            4 when direction is -1 => (-1, 1),
            0 when direction is -1 => (3, 1),
            3 when direction is 1 => (8, -1),
            _ => (offset, direction)
        };
    }
    
    protected override void OnInitialized()
    {
        // Db Integration get the selected Event 
        // Get the clusters and find a sane way to place them all :c
        _selectedReservation = new Reservation(1, 3, true, "");
        _clusters = new List<Cluster>();
        _paths = new List<int[]>();
        _startNode = null;
        AddCluster("1",12, Cluster.ClusterType.Vertical,3);
        AddCluster("2",13, Cluster.ClusterType.Vertical,3);
        AddCluster("3",14, Cluster.ClusterType.Vertical,3);
        AddCluster("4",15, Cluster.ClusterType.Vertical,3);
        
        AddCluster("L",0, Cluster.ClusterType.Round);
        AddCluster("I",1, Cluster.ClusterType.Round);
        AddCluster("F",2, Cluster.ClusterType.Round);
        AddCluster("C",3, Cluster.ClusterType.Round);
        AddCluster("K",4, Cluster.ClusterType.Round);
        AddCluster("H",5, Cluster.ClusterType.Round);
        AddCluster("E",6, Cluster.ClusterType.Round);
        AddCluster("B",7, Cluster.ClusterType.Round);
        AddCluster("J",8, Cluster.ClusterType.Round);
        AddCluster("G",9, Cluster.ClusterType.Round);
        AddCluster("D",10, Cluster.ClusterType.Round);
        AddCluster("A",11, Cluster.ClusterType.Round);
    }

    private void AddCluster(string name, int id, Cluster.ClusterType type, int len = 8)
    {
        var target = new Cluster(name, 0){Id = id, Tables = new List<Table>(), Type = type};
        _clusters.Add(target);
        for (var i = 0; i < len; i++)
        {
            target.Tables.Add(_random.Next(0, 5) == 1 ?
                new Table {Id = _random.Next(0,10000), Cluster = target,Reservation = new Reservation(0, 1, true, "")} :
                new Table {Id = _random.Next(0,10000), Cluster = target});
        }
    }

}
