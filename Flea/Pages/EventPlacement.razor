@page "/Placing"
@using Flea.Models
@using Table = Flea.Models.Table
@using Cluster = Flea.Models.Cluster
<h1>Placing</h1>
<div class="clusters">
    @for (var i = 0; i < Clusters.Count; i++)
    {
        <Cluster 
            Inner="@Clusters[i]"
            StartNode="@StartNode"
            EndNodes="@EndNodes"
            SelectedCluster="@_selectedCluster"
            ClusterIndex="@i"
            OnTableSelect="@TableSelected"
        />
    }
</div>
<style>
    .table {
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px solid black;
    }
    .table.vertical {
        width: 50px;
        height: 25px;
    }
    .table.horizontal {
        width: 25px;
        height: 50px;
    }
    .table.bottom {
        margin-top: 25px;
    }
    .table.on {
        background-color: gray;
    }
    .table.off {
        background-color: white;
        color: black;
    }
    .table.path {
        border-color: #00ff00;
        border-style: dashed;
    }
    .table.start {
        background-color: #00ff00;
    }
    .cluster {
        position: relative;
        display: grid;
        width: max-content;
        grid-template-columns: repeat(4, max-content);
        row-gap: 13px; /* 12.5 */
    }
    .cluster-tag {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
    .clusters {
        display: grid;
        grid-template-columns: repeat(4, max-content);
        row-gap: 25px;
        column-gap: 25px;
    }
</style>
@code {
    private List<Cluster> Clusters { get; set; }
    private readonly Random _random = new ();  
    private Reservation? SelectedReservation { get; set; }
    public int StartNode { get; set; }
    public List<int[]> EndNodes { get; set; }
    private Cluster _selectedCluster { get; set; }
    
    private void TableSelected((int,int,int) id)
    {
        var (t, c, e) = id;
        if (SelectedReservation == null)
        {
            Console.WriteLine("No reservation has been selected");
            return;
        }
        if (c > Clusters.Count - 1)
        {
            Console.WriteLine("The selected cluster does not exist!");
            return;
        }
        _selectedCluster = Clusters[c];
        
        if (t > _selectedCluster.Tables.Count - 1)
        {
            Console.WriteLine("The selected table does not exists");
            return;
        }
        if (e != -1)
        {
            ConfirmSelection(e);
            return;
        }
        // Maybe we should also check if selected reservation is null?
        if(_selectedCluster.Tables[t].Reservation != null) Console.WriteLine("Show Reservation Panel");
        var endNode1 = SelectedPaths(_selectedCluster, t, 1);
        if (endNode1.Length > 0)
        {
            EndNodes.Add(endNode1);
            Console.WriteLine("bbb");
            StartNode = t;
        }
        if (_selectedCluster.Type != Cluster.ClusterType.Round) return;
        var endNode2 = SelectedPaths(_selectedCluster, t, -1);
        if (endNode2.Length == 0) return;
        Console.WriteLine("aaa");
        EndNodes.Add(endNode2);
        StartNode = t;
    }

    private void ConfirmSelection(int endNode)
    {
        if(SelectedReservation == null) return;
        var direction = -1;
        var offset = endNode;
        for (var i = 0; i < SelectedReservation.TableCount; i++)
        {
            var table = _selectedCluster.Tables.Find(t => t.Id == offset);
            if (table != null) table.Reservation = SelectedReservation;
            (offset, direction) = Wrap(offset, direction);
            offset += direction;
        }
        SelectedReservation = null;
        StartNode = -1;
        EndNodes.Clear();
    }
    
    private int[] SelectedPaths(Cluster cluster,  int offset, int direction)
    {
        if (SelectedReservation == null) return Array.Empty<int>();
        var ids = new int[SelectedReservation.TableCount];
        for (var i = 0; i < SelectedReservation.TableCount; i++)
        {
            if (cluster.Tables[offset].Reservation == null)
            {
                ids[i] = cluster.Tables[offset].Id;
                if (cluster.Type == Cluster.ClusterType.Round)
                    (offset, direction) = Wrap(offset, direction);
                offset += direction;
                if (offset >= cluster.Tables.Count && i != cluster.Tables.Count-1)
                {
                    Console.WriteLine("Could not reserve a continuous line of tables.");
                    return Array.Empty<int>();
                }
                continue;
            }
            Console.WriteLine("Could not reserve a continuous line of tables.");
            return Array.Empty<int>();
        }
        return ids;
    }

    private static (int, int) Wrap(int offset, int direction)
    {
        return offset switch
        {
            7 when direction is 1 => (4, -1),
            4 when direction is -1 => (-1, 1),
            0 when direction is -1 => (3, 1),
            3 when direction is 1 => (8, -1),
            _ => (offset, direction)
        };
    }
    
    protected override void OnInitialized()
    {
        SelectedReservation = new Reservation(1, 3, true, "");
        Clusters = new List<Cluster>();
        EndNodes = new List<int[]>();
        StartNode = -1;
        AddCluster("1",12, Cluster.ClusterType.Vertical,3);
        AddCluster("2",13, Cluster.ClusterType.Vertical,3);
        AddCluster("3",14, Cluster.ClusterType.Vertical,3);
        AddCluster("4",15, Cluster.ClusterType.Vertical,3);
        
        AddCluster("L",0, Cluster.ClusterType.Round);
        AddCluster("I",1, Cluster.ClusterType.Round);
        AddCluster("F",2, Cluster.ClusterType.Round);
        AddCluster("C",3, Cluster.ClusterType.Round);
        AddCluster("K",4, Cluster.ClusterType.Round);
        AddCluster("H",5, Cluster.ClusterType.Round);
        AddCluster("E",6, Cluster.ClusterType.Round);
        AddCluster("B",7, Cluster.ClusterType.Round);
        AddCluster("J",8, Cluster.ClusterType.Round);
        AddCluster("G",9, Cluster.ClusterType.Round);
        AddCluster("D",10, Cluster.ClusterType.Round);
        AddCluster("A",11, Cluster.ClusterType.Round);
    }

    private void AddCluster(string name, int id, Cluster.ClusterType type, int len = 8)
    {
        var target = new Cluster(name, 0){Id = id, Tables = new List<Table>(), Type = type};
        Clusters.Add(target);
        for (var i = 0; i < len; i++)
        {
            //target.Tables.Add(new Table {Id = i, Cluster = target});
            target.Tables.Add(_random.Next(0, 5) == 1 ?
                new Table {Id = i, Cluster = target,Reservation = new Reservation(0, 1, true, "")} :
                new Table {Id = i, Cluster = target});
        }
    }

}
