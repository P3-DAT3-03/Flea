@page "/"
@page "/Home"

@inject IDbContextFactory<BingoContext> _dbFactory

@using Event = Flea.Models.Event;
@using Flea.Models
@using Flea.Utility
@using Microsoft.EntityFrameworkCore

<HeaderTitle Value="Loppemarkeder"/>

<div>
    <div class="view-head">
        <input class="search-input" type="search" value="" @oninput="Search" placeholder="Søg efter loppemarked..."/>
        <Modal ButtonCSS="button button--outline create-button" ButtonName="Tilføj nyt loppemarked" @ref="_child">
            <div>
                <h5>Hvor mange loppemarkeder ønsker I at oprette?</h5>
                <label>Antal loppemarkeder: </label>
                <input type="text" @bind="_tempEvents.EventAmount">
            </div>
            <CreateEventForm EventList="_tempEvents" OnValidSubmit="CreateEvents" Modal="_child"></CreateEventForm>
        </Modal>
    </div>

    @if (_shownEvents is not null && _shownEvents.Any())
    {
        @foreach (var e in _shownEvents)
        {
            <div>
                <EventListItem Event="@e"></EventListItem>
            </div>
        }
        <div style="display: inline-block"></div>
    }
    else
    {
        <h2>Der er ingen loppemarkeder at vise...</h2>
    }
</div>


@code {

    public class EventList
    {
        private int _eventAmount = 1;

        public List<Event> Events { get; set; } = new() {new Event(DateTime.Today)};
        public int EventAmount
        {
            get { return _eventAmount; }
            set
            {
                _eventAmount = value;
                CreateEventListPlaceholders();
            }
        } 
        
        public void CreateEventListPlaceholders()
        {
            this.Events.Clear();
            for (int i = 0; i < this.EventAmount; i++)
            {
                this.Events.Add(new Event(DateTime.Today));
            }
        }
    }

    private EventList _tempEvents = new();
    private Modal _child = null!;
    private List<Event>? _events;
    private IEnumerable<Event>? _shownEvents;
    private string _lastSearchTerm = string.Empty;

    public async Task CreateEvents()
    {
        var q = _dbFactory.Update();
        foreach (var e in _tempEvents.Events)
        {
            e.UpdateName();
            q.New(e);
        }
        await q.Save();
        await UpdateEventList();
        _child.ModalCancel();
        _tempEvents.EventAmount = 1;
    }

    private async Task UpdateEventList()
    {
        _events = await _dbFactory.Get<BingoContext,Event>()
            .Include(e => e.Clusters)
            .ThenInclude<Cluster, IEnumerable<Table>>(c => c.Tables)
            .Include(e => e.Reservations)
            .All();
        Search(_lastSearchTerm);
    }

    public void Search(ChangeEventArgs e) => Search(e.Value?.ToString()?.ToLower() ?? "");
    
    public void Search(string searchTerm)
    {
        if (searchTerm == "")
        {
            _shownEvents = _events;
        }
        else
        {
            var results = from e 
                in _events 
                where e.Name.ToLower().Contains(searchTerm.ToLower()) 
                select e;
            _shownEvents = results;
        }

        _lastSearchTerm = searchTerm;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await UpdateEventList();
        await base.OnInitializedAsync();
    }
    
}