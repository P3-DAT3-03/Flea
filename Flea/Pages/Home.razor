@page "/"
@page "/Home"

@inject IDbContextFactory<BingoContext> _dbFactory

@using Event = Flea.Models.Event;
@using Flea.Models
@using Flea.Utility
@using Microsoft.EntityFrameworkCore

<div>
    <div class="view-head">
        <input class="search-input" @bind-value="_searchTerm" @oninput="Search" placeholder="Søg efter loppemarked..."/>
        <Modal ButtonName="Tilføj nyt loppemarked" @ref="_child">
            <div>
                <h5>Hvor mange loppemarkeder ønsker I at oprette?</h5>
                <label>Antal loppemarkeder: </label>
                <input type="text" @bind-value="TempEvents.EventAmount">
            </div>
            @if (TempEvents.EventAmount > 0)
            {
                TempEvents.Events.Clear();
                for (int i = 0; i < TempEvents.EventAmount; i++)
                {
                    TempEvents.Events.Add(new Event(DateTime.Today));
                }
                TempEvents.EventAmount = 1;
            }
            <CreateEventForm EventList="TempEvents" OnValidSubmit="CreateEvents" Modal="_child"></CreateEventForm>
        </Modal>
    </div>

    <!-- Creates event items for each event that matches the user's search term -->
    @if (_events.Count == 0)
    {
        <h2>Der er ingen loppemarkeder at vise...</h2>
    }
    else if (_shownEvents.Count == 0)
    {
        <h2>Der er ingen loppemarkeder, der matcher søgekriterierne...</h2>
    }
    else
    {
        foreach (var e in _shownEvents)
        {
            <div>
                <EventListItem Event="@e"></EventListItem>
            </div>
        }
    }
</div>


@code {
    
    public class EventList
    {
        public List<Event> Events { get; set; } = new();
        public int EventAmount { get; set; } = 1;
    }

    public EventList TempEvents { get; set; } = new();
    private Modal _child = null!;
    private string _searchTerm = "";
    private List<Event> _events = new();

    // List of events from database that match the search term.
    private List<Event>? _shownEvents = new();
    

    public async Task CreateEvents()
    {
        foreach (var e in TempEvents.Events)
        {
            await _dbFactory.SaveNew(e);
        }
        _child.ModalCancel();
        await UpdateEventList();
    }

    private async Task UpdateEventList()
    {
        _events = await _dbFactory.GetAll<BingoContext,Event>();
    }

    public void Search(ChangeEventArgs e) => Search(e.Value?.ToString()?.ToLower() ?? "");
    
    public void Search(string searchTerm)
    {
        if (searchTerm == "")
        {
            _shownEvents = _events;
        }
        else
        {
            _shownEvents = _events.Where(i => i.Name.ToLower().Contains(_searchTerm.ToLower())).ToList();
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await UpdateEventList();
        await base.OnInitializedAsync();
    }
}