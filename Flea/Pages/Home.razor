@page "/"
@page "/Home"

@inject IDbContextFactory<BingoContext> _dbFactory

@using Event = Flea.Models.Event;
@using Cluster = Flea.Models.Cluster;
@using Table = Flea.Models.Table;
@using Flea.Models
@using Flea.Utility
@using Microsoft.EntityFrameworkCore

<HeaderTitle Value="Loppemarkeder"/>

<div class="padded-content">
    <div class="view-head">
        <input class="search-input" type="search" value="" @oninput="Search" placeholder="Søg efter loppemarked..."/>
        <Modal ButtonCSS="button c-blue create-button" ButtonName="Tilføj nyt loppemarked" @ref="_modal">
            <div>
                <h5>Hvor mange loppemarkeder ønsker I at oprette?</h5>
                <label>Antal loppemarkeder: </label>
                <input type="text" @bind="_tempEvents.EventAmount">
            </div>
            <CreateEventForm EventList="_tempEvents" OnValidSubmit="CreateEvents" Modal="_modal"></CreateEventForm>
        </Modal>
        <button style="margin-right: 15px; float: right;" class="button outlined c-blue" @onclick="ToggleEditState">@EditButtonLabel</button>
    </div>

    @if (_shownEvents is not null && _shownEvents.Any())
    {
        <div class="scrollable">
            @foreach (var e in _shownEvents)
            {
                <EventListItem IsEditMode="_isInEditMode" OnDelete="OnEventDeleted" Event="e"></EventListItem>
            }
        </div>
    }
    else
    {
        <h2>Der er ingen loppemarkeder at vise...</h2>
    }
</div>


@code {

    public class EventList
    {
        private int _eventAmount = 1;

        public List<Event> Events { get; set; } = new() {new Event(DateTime.Today)};
        public int EventAmount
        {
            get => _eventAmount;
            set
            {
                _eventAmount = value;
                CreateEventListPlaceholders();
            }
        } 
        
        public void CreateEventListPlaceholders()
        {
            Events.Clear();
            for (int i = 0; i < EventAmount; i++)
            {
                Events.Add(new Event(DateTime.Today));
            }
        }
    }

    private EventList _tempEvents = new();
    private Modal _modal = null!;
    private List<Event>? _events;
    private IEnumerable<Event>? _shownEvents;
    private string _lastSearchTerm = string.Empty;
    private bool _isInEditMode;

    private string EditButtonLabel => _isInEditMode ? "Annuller" : "Rediger";

    public void ToggleEditState()
    {
        _isInEditMode = !_isInEditMode;
    }

    public async Task CreateEvents()
    {
        var q = _dbFactory.Update();
        foreach (var e in _tempEvents.Events)
        {
            e.UpdateName();
            q.New(e);
        }
        await q.Save();
        await UpdateEventList();
        _modal.Close();
        _tempEvents.EventAmount = 1;
    }

    private async Task UpdateEventList()
    {
        _events = await _dbFactory.Get<BingoContext,Event>()
            .Include(e => e.Clusters)
            .ThenInclude<Cluster, IEnumerable<Table>>(c => c.Tables)
            .Include(e => e.Reservations)
            .All();
        Search(_lastSearchTerm);
    }

    private Task OnEventDeleted(Event @event)
    {
        _events!.Remove(@event);
        Search(_lastSearchTerm); // Refresh the list
        return Task.CompletedTask;
    }
    
    public void Search(ChangeEventArgs e) => Search(e.Value?.ToString()?.ToLower() ?? "");
    
    public void Search(string searchTerm)
    {
        if (searchTerm == "")
        {
            _shownEvents = _events;
        }
        else
        {
            var results = from e 
                in _events 
                where e.Name.ToLower().Contains(searchTerm.ToLower()) 
                select e;
            _shownEvents = results;
        }

        _lastSearchTerm = searchTerm;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await UpdateEventList();
        await base.OnInitializedAsync();
    }
    
}