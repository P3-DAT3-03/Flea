using System.Threading.Tasks;
using Flea.Models;
using Flea.Utility;
using NUnit.Framework;

namespace Flea.Tests.DbIntegration
{
	public class QueryBuilderTests : Base
	{
		/*
		 * Throughout this class we make use of the term principal entity
		 * to mean an entity which does not contain a foreign key. This does
		 * not mean that it does not have any relations to other objects merely
		 * that its model does not directly refer to any foreign objects by their key.
		 *
		 * It should also be mentioned that while tests are not technically dependant,
		 * each test assumes that the previous test was successful and thus may make
		 * use of concepts that were tested in previous tests. Thus early tests failing
		 * may cause other tests to also fail.
		 */
		
		/// <summary>
		/// Creates a new principal entity and saves it.
		/// We verify that the operation was a success by observing a change
		/// in customer id which is generated by the database.
		/// </summary>
		[Test]
		public async Task AddPrincipalEntity()
		{
			var customer = new Customer("Test customer", "70154265");
			Assert.AreEqual(customer.Id, 0);
			await Factory.Query<BingoContext, Customer>()
				.New(customer)
				.Save();
			Assert.AreEqual(customer.Id, 1);
		}

		/// <summary>
		/// Fetches an principal entity from the database.
		/// </summary>
		[Test]
		public async Task GetPrincipalEntity()
		{
			const string customerName = "Test customer";
			const string customerPhone = "12345678";
			
			await Factory.Query<BingoContext, Customer>()
				.New(new Customer(customerName, customerPhone))
				.Save();

			var customer = await Factory.Query<BingoContext, Customer>().First();
			
			Assert.NotNull(customer);
			Assert.AreEqual(customer.Id, 1);
			Assert.AreEqual(customer.Name, customerName);
			Assert.AreEqual(customer.PhoneNumber, customerPhone);
		}
		
		[Test]
		public async Task UpdatePrincipalEntity()
		{
			const string updatedName = "Test customer 2";
			// Create initial customer
			var customer = new Customer("Test customer", "12345678");
			await Factory.Query<BingoContext, Customer>()
				.New(customer)
				.Save();

			// Change name value and save update
			customer.Name = updatedName;
			await Factory.Query<BingoContext, Customer>()
				.Update(customer)
				.Save();
			
			// Fetch customer from database and verify changes
			customer = await Factory.Query<BingoContext, Customer>().First();
			Assert.NotNull(customer);
			Assert.AreEqual(customer.Name, updatedName);
		}
	}
}